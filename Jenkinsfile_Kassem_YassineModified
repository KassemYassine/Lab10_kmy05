pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
        PYTHONIOENCODING = 'utf-8'  // Ensuring UTF-8 encoding
        DEPLOY_DIR = 'C:\\deploy\\myapplication'  // Set your deployment directory path here
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    if (!fileExists("${env.WORKSPACE}\\${env.VIRTUAL_ENV}")) {
                        bat "python -m venv ${env.WORKSPACE}\\${env.VIRTUAL_ENV}"
                    }
                    bat "call ${env.WORKSPACE}\\${env.VIRTUAL_ENV}\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    bat "call ${env.WORKSPACE}\\${env.VIRTUAL_ENV}\\Scripts\\activate && flake8 app.py"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    bat "call ${env.WORKSPACE}\\${env.VIRTUAL_ENV}\\Scripts\\activate && pytest"
                }
            }
        }
        stage('Coverage') {
            steps {
                script {
                    bat "call ${env.WORKSPACE}\\${env.VIRTUAL_ENV}\\Scripts\\activate && coverage run -m pytest && coverage report"
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    bat "call ${env.WORKSPACE}\\${env.VIRTUAL_ENV}\\Scripts\\activate && bandit -r . --quiet --exclude ./venv"
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Simulate deployment by copying files to a specific directory
                    bat "if not exist ${env.DEPLOY_DIR} mkdir ${env.DEPLOY_DIR}"
                    bat "xcopy /S /Y ${env.WORKSPACE}\\* ${env.DEPLOY_DIR}\\"
                    bat "echo Deployed application to ${env.DEPLOY_DIR}"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
